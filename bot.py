import os
import re
import asyncio
import logging
from datetime import datetime, date, timedelta
from typing import Optional, List, Dict

from dotenv import load_dotenv
from geopy.geocoders import Nominatim
from geopy.distance import geodesic

import psycopg2
from psycopg2.extras import RealDictCursor

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler, 
    ContextTypes, filters, ConversationHandler
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

if not TELEGRAM_TOKEN or not DATABASE_URL:
    raise RuntimeError("TELEGRAM_TOKEN –∏–ª–∏ DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)
logger = logging.getLogger("lovebot")

geolocator = Nominatim(user_agent="lovebot")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
NAME, AGE, GENDER, LOCATION, LOOKING_FOR, AGE_RANGE, BIO, PHOTO = range(8)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
EDIT_NAME, EDIT_AGE, EDIT_BIO, EDIT_PHOTO = range(100, 104)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
class Database:
    @staticmethod
    def execute(sql: str, params: tuple = (), fetch: Optional[str] = None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º"""
        try:
            with psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor) as conn:
                with conn.cursor() as cur:
                    cur.execute(sql, params)
                    if fetch == "one":
                        return cur.fetchone()
                    elif fetch == "all":
                        return cur.fetchall()
                    return None
        except psycopg2.Error as e:
            logger.error(f"Database error: {e}")
            return None

    @staticmethod
    def init_tables():
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        tables = [
            """CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                username TEXT,
                name TEXT NOT NULL,
                age INT NOT NULL,
                gender TEXT NOT NULL,
                city TEXT NOT NULL,
                latitude DOUBLE PRECISION,
                longitude DOUBLE PRECISION,
                looking_for TEXT NOT NULL,
                min_age INT NOT NULL,
                max_age INT NOT NULL,
                bio TEXT,
                photo_id TEXT,
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )""",
            """CREATE TABLE IF NOT EXISTS likes (
                from_user BIGINT NOT NULL,
                to_user BIGINT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (from_user, to_user)
            )""",
            """CREATE TABLE IF NOT EXISTS matches (
                user1 BIGINT NOT NULL,
                user2 BIGINT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (user1, user2)
            )""",
            """CREATE TABLE IF NOT EXISTS viewed_profiles (
                viewer_user BIGINT NOT NULL,
                viewed_user BIGINT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (viewer_user, viewed_user)
            )"""
        ]
        
        for table_sql in tables:
            Database.execute(table_sql)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
class UserManager:
    @staticmethod
    def exists(user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = Database.execute("SELECT 1 FROM users WHERE user_id = %s", (user_id,), fetch="one")
        return bool(result)

    @staticmethod
    def create(data: Dict) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        sql = """INSERT INTO users 
                (user_id, username, name, age, gender, city, latitude, longitude,
                 looking_for, min_age, max_age, bio, photo_id)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"""
        
        params = (
            data['user_id'], data.get('username'), data['name'], data['age'],
            data['gender'], data['city'], data.get('latitude'), data.get('longitude'),
            data['looking_for'], data['min_age'], data['max_age'], 
            data.get('bio'), data.get('photo_id')
        )
        
        result = Database.execute(sql, params)
        return result is not None

    @staticmethod
    def get(user_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        return Database.execute("SELECT * FROM users WHERE user_id = %s", (user_id,), fetch="one")

    @staticmethod
    def update_field(user_id: int, field: str, value):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        sql = f"UPDATE users SET {field} = %s WHERE user_id = %s"
        Database.execute(sql, (value, user_id))

    @staticmethod
    def find_candidates(user_id: int):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
        user = UserManager.get(user_id)
        if not user:
            return []

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É
        gender_condition = ""
        if user['looking_for'] in ['–º—É–∂—á–∏–Ω–∞', 'male']:
            gender_condition = "AND (gender ILIKE '–º—É–∂—á%' OR gender = 'male')"
        elif user['looking_for'] in ['–∂–µ–Ω—â–∏–Ω–∞', 'female']:
            gender_condition = "AND (gender ILIKE '–∂–µ–Ω%' OR gender = 'female')"

        sql = f"""SELECT * FROM users 
                 WHERE user_id != %s 
                 AND is_active = TRUE 
                 AND age BETWEEN %s AND %s 
                 {gender_condition}
                 AND user_id NOT IN (
                     SELECT to_user FROM likes WHERE from_user = %s
                 )
                 AND user_id NOT IN (
                     SELECT viewed_user FROM viewed_profiles WHERE viewer_user = %s
                 )
                 ORDER BY RANDOM() LIMIT 1"""

        return Database.execute(sql, (user_id, user['min_age'], user['max_age'], user_id, user_id), fetch="all")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–∞–π–∫–æ–≤ –∏ –º–∞—Ç—á–µ–π
class MatchManager:
    @staticmethod
    def add_like(from_user: int, to_user: int) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ª–∞–π–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∞—Ç—á"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
        Database.execute(
            "INSERT INTO likes (from_user, to_user) VALUES (%s, %s) ON CONFLICT DO NOTHING",
            (from_user, to_user)
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –ª–∞–π–∫
        mutual = Database.execute(
            "SELECT 1 FROM likes WHERE from_user = %s AND to_user = %s",
            (to_user, from_user), fetch="one"
        )
        
        if mutual:
            # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á
            user1, user2 = sorted([from_user, to_user])
            Database.execute(
                "INSERT INTO matches (user1, user2) VALUES (%s, %s) ON CONFLICT DO NOTHING",
                (user1, user2)
            )
            return True
        return False

    @staticmethod
    def mark_viewed(viewer: int, viewed: int):
        """–û—Ç–º–µ—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π"""
        Database.execute(
            "INSERT INTO viewed_profiles (viewer_user, viewed_user) VALUES (%s, %s) ON CONFLICT DO NOTHING",
            (viewer, viewed)
        )

    @staticmethod
    def get_matches(user_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ç—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        sql = """SELECT u.* FROM matches m
                JOIN users u ON (u.user_id = CASE WHEN m.user1 = %s THEN m.user2 ELSE m.user1 END)
                WHERE m.user1 = %s OR m.user2 = %s
                ORDER BY m.created_at DESC"""
        return Database.execute(sql, (user_id, user_id, user_id), fetch="all")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_coordinates(city: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞"""
    try:
        location = geolocator.geocode(city + ", Russia")
        return (location.latitude, location.longitude) if location else (None, None)
    except:
        return (None, None)

def format_profile(user) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return f"""üë§ {user['name']}, {user['age']} –ª–µ—Ç
üìç {user['city']}

üìù –û —Å–µ–±–µ: {user['bio'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"""

def create_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã", callback_data="browse")],
        [InlineKeyboardButton("‚ù§Ô∏è –ú–æ–∏ –º–∞—Ç—á–∏", callback_data="matches")],
        [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_menu")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_browse_keyboard(target_id: int):
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç"""
    keyboard = [
        [
            InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫", callback_data=f"like_{target_id}"),
            InlineKeyboardButton("üëé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_{target_id}")
        ],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if UserManager.exists(user_id):
        await update.message.reply_text(
            "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_menu()
        )
        return ConversationHandler.END
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤. –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É.\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        reply_markup=ReplyKeyboardRemove()
    )
    return NAME

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –∏–º—è
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if len(name) < 2:
        await update.message.reply_text("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
        return NAME
    
    context.user_data['name'] = name
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–æ—Ç 18 –¥–æ 100)")
    return AGE

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –≤–æ–∑—Ä–∞—Å—Ç
async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
        if 18 <= age <= 100:
            context.user_data['age'] = age
            
            keyboard = [
                [InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data="gender_male")],
                [InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="gender_female")]
            ]
            
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", 
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return GENDER
        else:
            await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç:")
            return AGE
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º:")
        return AGE

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –ø–æ–ª
async def get_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    gender = "–º—É–∂—á–∏–Ω–∞" if query.data == "gender_male" else "–∂–µ–Ω—â–∏–Ω–∞"
    context.user_data['gender'] = gender
    
    await query.edit_message_text("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞? –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    return LOCATION

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –≥–æ—Ä–æ–¥
async def get_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text.strip()
    if len(city) < 2:
        await update.message.reply_text("–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        return LOCATION
    
    lat, lon = get_coordinates(city)
    context.user_data.update({
        'city': city,
        'latitude': lat,
        'longitude': lon
    })
    
    keyboard = [
        [InlineKeyboardButton("üë® –ü–∞—Ä–Ω–µ–π", callback_data="looking_male")],
        [InlineKeyboardButton("üë© –î–µ–≤—É—à–µ–∫", callback_data="looking_female")]
    ]
    
    await update.message.reply_text(
        "–ö–æ–≥–æ –∏—â–µ—à—å?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return LOOKING_FOR

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –∫–æ–≥–æ –∏—â–µ—Ç
async def get_looking_for(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    looking_for = "–º—É–∂—á–∏–Ω–∞" if query.data == "looking_male" else "–∂–µ–Ω—â–∏–Ω–∞"
    context.user_data['looking_for'] = looking_for
    
    await query.edit_message_text(
        "–í –∫–∞–∫–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ? –ù–∞–ø–∏—à–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20-30):"
    )
    return AGE_RANGE

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
async def get_age_range(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    match = re.match(r'(\d{2})-(\d{2})', text)
    
    if not match:
        await update.message.reply_text("–í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 20-30")
        return AGE_RANGE
    
    min_age, max_age = int(match.group(1)), int(match.group(2))
    
    if min_age < 18 or max_age > 100 or min_age > max_age:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω. –ü—Ä–∏–º–µ—Ä: 20-30")
        return AGE_RANGE
    
    context.user_data.update({
        'min_age': min_age,
        'max_age': max_age
    })
    
    await update.message.reply_text("–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:")
    return BIO

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –æ–ø–∏—Å–∞–Ω–∏–µ
async def get_bio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bio = update.message.text.strip()[:500]
    context.user_data['bio'] = bio
    
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
    return PHOTO

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - —Ñ–æ—Ç–æ
async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        photo_id = update.message.photo[-1].file_id
        context.user_data['photo_id'] = photo_id
    else:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ /skip:")
        return PHOTO
    
    return await save_user_profile(update, context)

async def skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['photo_id'] = None
    return await save_user_profile(update, context)

async def save_user_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = {
        'user_id': update.effective_user.id,
        'username': update.effective_user.username,
        **context.user_data
    }
    
    if UserManager.create(user_data):
        await update.message.reply_text(
            "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤.",
            reply_markup=create_main_menu()
        )
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π /start –µ—â–µ —Ä–∞–∑.")
    
    return ConversationHandler.END

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç
async def browse_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
        user_id = query.from_user.id
    else:
        user_id = update.effective_user.id
    
    if not UserManager.exists(user_id):
        text = "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –∞–Ω–∫–µ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /start"
        if query:
            await query.edit_message_text(text)
        else:
            await update.message.reply_text(text)
        return
    
    candidates = UserManager.find_candidates(user_id)
    
    if not candidates:
        text = "–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        keyboard = create_main_menu()
        if query:
            await query.edit_message_text(text, reply_markup=keyboard)
        else:
            await update.message.reply_text(text, reply_markup=keyboard)
        return
    
    candidate = candidates[0]
    text = format_profile(candidate)
    keyboard = create_browse_keyboard(candidate['user_id'])
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —ç—Ç–æ callback
    if query:
        await query.message.delete()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑
    if candidate.get('photo_id'):
        try:
            await context.bot.send_photo(
                chat_id=user_id,
                photo=candidate['photo_id'],
                caption=text,
                reply_markup=keyboard
            )
        except:
            await context.bot.send_message(user_id, text, reply_markup=keyboard)
    else:
        await context.bot.send_message(user_id, text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–æ–≤
async def handle_like(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    target_id = int(query.data.split('_')[1])
    
    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π
    MatchManager.mark_viewed(user_id, target_id)
    
    # –°—Ç–∞–≤–∏–º –ª–∞–π–∫
    is_match = MatchManager.add_like(user_id, target_id)
    
    if is_match:
        target_user = UserManager.get(target_id)
        current_user = UserManager.get(user_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –º–∞—Ç—á–µ
        await query.edit_message_caption(
            f"üíï –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å {target_user['name']}!\n\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: @{target_user['username'] or '—Å–∫—Ä—ã—Ç'}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –¥–∞–ª—å—à–µ", callback_data="browse"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                target_id,
                f"üíï –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å {current_user['name']}!\n\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç: @{current_user['username'] or '—Å–∫—Ä—ã—Ç'}"
            )
        except:
            pass
    else:
        await query.edit_message_caption(
            "‚ù§Ô∏è –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –¥–∞–ª—å—à–µ", callback_data="browse")
            ]])
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞
async def handle_skip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    target_id = int(query.data.split('_')[1])
    
    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π
    MatchManager.mark_viewed(user_id, target_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
    await query.message.delete()
    await browse_profiles(update, context)

# –ú–æ–∏ –º–∞—Ç—á–∏
async def show_matches(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    matches = MatchManager.get_matches(query.from_user.id)
    
    if not matches:
        await query.edit_message_text(
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π. –°—Ç–∞–≤—å –±–æ–ª—å—à–µ –ª–∞–π–∫–æ–≤!",
            reply_markup=create_main_menu()
        )
        return
    
    text = "üíï –¢–≤–æ–∏ –º–∞—Ç—á–∏:\n\n"
    for match in matches[:10]:
        username = f"@{match['username']}" if match['username'] else "–∫–æ–Ω—Ç–∞–∫—Ç —Å–∫—Ä—ã—Ç"
        text += f"‚Ä¢ {match['name']}, {match['age']} ‚Äî {username}\n"
    
    await query.edit_message_text(text, reply_markup=create_main_menu())

# –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = UserManager.get(query.from_user.id)
    if not user:
        await query.edit_message_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    looking_text = "–ø–∞—Ä–Ω–µ–π" if user['looking_for'] == '–º—É–∂—á–∏–Ω–∞' else "–¥–µ–≤—É—à–µ–∫"
    text = f"""üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:

üìù –ò–º—è: {user['name']}
üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user['age']} –ª–µ—Ç
üë§ –ü–æ–ª: {user['gender']}
üìç –ì–æ—Ä–æ–¥: {user['city']}
üíï –ò—â–µ—à—å: {looking_text} {user['min_age']}-{user['max_age']} –ª–µ—Ç

üìñ –û —Å–µ–±–µ: {user['bio'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"""
    
    await query.edit_message_text(text, reply_markup=create_main_menu())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=create_main_menu()
    )

# –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    Database.init_tables()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    registration_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
            GENDER: [CallbackQueryHandler(get_gender, pattern=r"^gender_")],
            LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_location)],
            LOOKING_FOR: [CallbackQueryHandler(get_looking_for, pattern=r"^looking_")],
            AGE_RANGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age_range)],
            BIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_bio)],
            PHOTO: [MessageHandler(filters.PHOTO, get_photo), CommandHandler("skip", skip_photo)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(registration_handler)
    application.add_handler(CallbackQueryHandler(browse_profiles, pattern="browse"))
    application.add_handler(CallbackQueryHandler(handle_like, pattern=r"^like_\d+"))
    application.add_handler(CallbackQueryHandler(handle_skip, pattern=r"^skip_\d+"))
    application.add_handler(CallbackQueryHandler(show_matches, pattern="matches"))
    application.add_handler(CallbackQueryHandler(show_profile, pattern="profile"))
    application.add_handler(CallbackQueryHandler(main_menu, pattern="main_menu"))
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("browse", browse_profiles))
    application.add_handler(CommandHandler("matches", show_matches))
    application.add_handler(CommandHandler("profile", show_profile))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    # –ó–∞–ø—É—Å–∫ polling
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()